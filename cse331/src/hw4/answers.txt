CSE 331 Homework 4.  Answers to Written questions.
Edit this file to supply your answers.

Name:  Pinyi Wang

Problem 0.

(a) r = p * q:
		initialize r to a polynomial that has 0 terms in it
		foreach term, t_p, in p:
			 foreach term, t_q, in q:
			 	initialize s to a polynomial that has 1 term, which equals to 
			 		the product of t_p and t_q
				r = r + s;

(b) q = u / v:
		initialize q to a polynomial that has 0 terms in it
		set p = u by making a term-by-term copy of all terms in u to p
		initialize t_v0 as a term to a copy of the greatest-degree term in v
		while p does not equals to null:
			initialize t_p0 as a term to a copy of the greatest-degree term in p
			if degree of t_v0 is less than or equals to degree of t_p0,
				then initialize d to a polynomial that has 1 term, which equals
					 	to (t_p0 / t_v0),
					 q = q + d;
					 d = -d;
					 initialize temp as a term-by-term copy of all terms in v,
					 temp = temp * d;
					 p = p + temp;
				else set p to null

(c)	u = (x^3 + x - 1)
	v = (x + 1)
	q = a 0-term polynomial
	p = copy of u = (x^3 + x - 1)
	t_v0 = copy of the greatest-degree term in v = x
	while p != null
		Iteration 1: 
			t_p0 = copy of the greatest-degree term in p = x^3
			[if degree of t_v0 <= degree of t_p0] YES
			[then initialize d to a poly = (t_p0 / t_v0)] d = x^2
				q = q + d = x^2
				d = -d = -x^2
				temp = copy of v = (x + 1)
				temp = temp * d = (-x^3 - x^2)
				p = p + temp = (-x^2 + x - 1)
			[else set p = null]
		Iteration 2:
			t_p0 = copy of the greatest-degree term in p = -x^2
			[if degree of t_v0 <= degree of t_p0] YES
			[then initialize d to poly = (t_p0 / t_v0)] d = -x
				q = q + d = x^2 - x
				d = -d = x
				temp = copy of v = (x + 1)
				temp = temp * d = (x^2 + x)
				p = p + temp = (2x - 1)
			[else set p = null]
		Iteration 3:
			t_p0 = copy of the greatest-degree term in p = 2x
			[if degree of t_v0 <= degree of t_p0] YES
			[then initialize d to poly = (t_p0 / t_v0)] d = 2
				q = q + d = (x^2 - x + 2)
				d = -d = -2
				temp = copy of v = (x + 1)
				temp = temp * d = (-2x -2)
				p = p + temp = -2
			[else set p = null]
		Iteration 4:
			t_p0 = copy of the greatest-degree term in p = -2
			[if degree of t_v0 <= degree of t_p0] NO
			[then initialize d to poly = (t_p0 / t_v0)]
			[else set p = null] p = null
		We are done! q = (x^2 - x + 2)

Problem 1.

(a) If the fields are no longer required to be stored in reduced form, then
	hashCode(), equals(), toString() should be changed, since 1/2 and 2/4
	should be considered the same thing and output the same value, but now
	before returning their output these methods have to first find the
	reduced form, which would be less efficient if they are called
	multiple times.
	The RatNum(int n, int d) constructor can now don't have to find the gcd,
	since the Rep Invariant does not required it.

(b)	Since the specification of these method does not told clients that these
	method will modify this.numer and this.denom after calling one of them, it
	should not change the abstract state of the object without telling the
	clients.
	The specification of RatNum stated that it represents an immutable rational
	number, which means the abstract state of the class shouldn't be changed.

(c)	It is sufficient to call checkRep only at the end of the constructors in
	RatNum, since the only things checkRep() checks, in this class, are the
	fields of RatNum, and the fields of RatNum are both declare as final.
	Therefore, since no methods are able to change the state of the RatNum,
	as long as at the end of the constructors checkRep() passed, the class will
	always meet the Rep Invariant.


Problem 2. (must specify the new method I defined)

(a)	I include calls to checkRep() only at the end of the constructors, since
	this class is immutable and all of its fields are declared as final, if
	it passed the checkRep() after the constructors, no other methods are able
	to modify its field.

(b)	getExpt() and toString() should check whether coeff is zero, since 0x^2 is
	invalid	according to the class specification, they should treat expt as
	0 if coeff == 0.
	hashCode() and equals() should also check whether coeff is zero before they
	return their output, since 0x^2 and 0x^3 should be considered the same
	thing.
	Weakening the representation invariant in this way will make the code less
	clear, since the specification state that 0x^2 is valid, but the class will
	not throw an error if 0x^2 is created.

(c) Since now terms like NaN*x^74 are considered invalid to RatTerm class and
	the check is added into the representation invariant, we can satisfy it
	just by making expt = 0 if coeff.isNaN() in the constructors and because
	those fields are declared as final, we are not able to break the rule in
	other methods.
	Which set of RatTerm invariants is better really depends on how the class
	specification was stated. However, I prefer both of them, since NaN*x^74
	doesn't really make sense to me.


Problem 5.
